/*
 * Shopware Store API
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.5.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codebarista.shopware.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Added since version: 6.0.0.0
 */
@JsonPropertyOrder({
  Media.JSON_PROPERTY_ID,
  Media.JSON_PROPERTY_MIME_TYPE,
  Media.JSON_PROPERTY_FILE_EXTENSION,
  Media.JSON_PROPERTY_UPLOADED_AT,
  Media.JSON_PROPERTY_FILE_NAME,
  Media.JSON_PROPERTY_FILE_SIZE,
  Media.JSON_PROPERTY_META_DATA,
  Media.JSON_PROPERTY_ALT,
  Media.JSON_PROPERTY_TITLE,
  Media.JSON_PROPERTY_URL,
  Media.JSON_PROPERTY_PATH,
  Media.JSON_PROPERTY_HAS_FILE,
  Media.JSON_PROPERTY_PRIVATE,
  Media.JSON_PROPERTY_CUSTOM_FIELDS,
  Media.JSON_PROPERTY_CREATED_AT,
  Media.JSON_PROPERTY_UPDATED_AT,
  Media.JSON_PROPERTY_TRANSLATED,
  Media.JSON_PROPERTY_THUMBNAILS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T11:26:02.541008353+02:00[Europe/Berlin]", comments = "Generator version: 7.5.0")
public class Media {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;

  public static final String JSON_PROPERTY_FILE_EXTENSION = "fileExtension";
  private String fileExtension;

  public static final String JSON_PROPERTY_UPLOADED_AT = "uploadedAt";
  private OffsetDateTime uploadedAt;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  private Long fileSize;

  public static final String JSON_PROPERTY_META_DATA = "metaData";
  private Object metaData;

  public static final String JSON_PROPERTY_ALT = "alt";
  private String alt;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_HAS_FILE = "hasFile";
  private Boolean hasFile;

  public static final String JSON_PROPERTY_PRIVATE = "private";
  private Boolean _private;

  public static final String JSON_PROPERTY_CUSTOM_FIELDS = "customFields";
  private Object customFields;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_TRANSLATED = "translated";
  private Object translated;

  public static final String JSON_PROPERTY_THUMBNAILS = "thumbnails";
  private List<MediaThumbnail> thumbnails = new ArrayList<>();

  public Media() {
  }

  @JsonCreator
  public Media(
    @JsonProperty(JSON_PROPERTY_MIME_TYPE) String mimeType, 
    @JsonProperty(JSON_PROPERTY_FILE_EXTENSION) String fileExtension, 
    @JsonProperty(JSON_PROPERTY_UPLOADED_AT) OffsetDateTime uploadedAt, 
    @JsonProperty(JSON_PROPERTY_FILE_NAME) String fileName, 
    @JsonProperty(JSON_PROPERTY_FILE_SIZE) Long fileSize, 
    @JsonProperty(JSON_PROPERTY_META_DATA) Object metaData, 
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt
  ) {
    this();
    this.mimeType = mimeType;
    this.fileExtension = fileExtension;
    this.uploadedAt = uploadedAt;
    this.fileName = fileName;
    this.fileSize = fileSize;
    this.metaData = metaData;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public Media id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


   /**
   * Get mimeType
   * @return mimeType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMimeType() {
    return mimeType;
  }




   /**
   * Get fileExtension
   * @return fileExtension
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileExtension() {
    return fileExtension;
  }




   /**
   * Get uploadedAt
   * @return uploadedAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOADED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUploadedAt() {
    return uploadedAt;
  }




   /**
   * Get fileName
   * @return fileName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }




   /**
   * Get fileSize
   * @return fileSize
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileSize() {
    return fileSize;
  }




   /**
   * Get metaData
   * @return metaData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_META_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getMetaData() {
    return metaData;
  }




  public Media alt(String alt) {
    
    this.alt = alt;
    return this;
  }

   /**
   * Get alt
   * @return alt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlt() {
    return alt;
  }


  @JsonProperty(JSON_PROPERTY_ALT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlt(String alt) {
    this.alt = alt;
  }


  public Media title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }


  public Media url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Runtime field, cannot be used as part of the criteria.
   * @return url
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public Media path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }


  public Media hasFile(Boolean hasFile) {
    
    this.hasFile = hasFile;
    return this;
  }

   /**
   * Runtime field, cannot be used as part of the criteria.
   * @return hasFile
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasFile() {
    return hasFile;
  }


  @JsonProperty(JSON_PROPERTY_HAS_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasFile(Boolean hasFile) {
    this.hasFile = hasFile;
  }


  public Media _private(Boolean _private) {
    
    this._private = _private;
    return this;
  }

   /**
   * Get _private
   * @return _private
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPrivate() {
    return _private;
  }


  @JsonProperty(JSON_PROPERTY_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public Media customFields(Object customFields) {
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCustomFields() {
    return customFields;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  public Media translated(Object translated) {
    
    this.translated = translated;
    return this;
  }

   /**
   * Get translated
   * @return translated
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSLATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTranslated() {
    return translated;
  }


  @JsonProperty(JSON_PROPERTY_TRANSLATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranslated(Object translated) {
    this.translated = translated;
  }


  public Media thumbnails(List<MediaThumbnail> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public Media addThumbnailsItem(MediaThumbnail thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THUMBNAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MediaThumbnail> getThumbnails() {
    return thumbnails;
  }


  @JsonProperty(JSON_PROPERTY_THUMBNAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThumbnails(List<MediaThumbnail> thumbnails) {
    this.thumbnails = thumbnails;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Media media = (Media) o;
    return Objects.equals(this.id, media.id) &&
        Objects.equals(this.mimeType, media.mimeType) &&
        Objects.equals(this.fileExtension, media.fileExtension) &&
        Objects.equals(this.uploadedAt, media.uploadedAt) &&
        Objects.equals(this.fileName, media.fileName) &&
        Objects.equals(this.fileSize, media.fileSize) &&
        Objects.equals(this.metaData, media.metaData) &&
        Objects.equals(this.alt, media.alt) &&
        Objects.equals(this.title, media.title) &&
        Objects.equals(this.url, media.url) &&
        Objects.equals(this.path, media.path) &&
        Objects.equals(this.hasFile, media.hasFile) &&
        Objects.equals(this._private, media._private) &&
        Objects.equals(this.customFields, media.customFields) &&
        Objects.equals(this.createdAt, media.createdAt) &&
        Objects.equals(this.updatedAt, media.updatedAt) &&
        Objects.equals(this.translated, media.translated) &&
        Objects.equals(this.thumbnails, media.thumbnails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, mimeType, fileExtension, uploadedAt, fileName, fileSize, metaData, alt, title, url, path, hasFile, _private, customFields, createdAt, updatedAt, translated, thumbnails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Media {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    hasFile: ").append(toIndentedString(hasFile)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    translated: ").append(toIndentedString(translated)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

