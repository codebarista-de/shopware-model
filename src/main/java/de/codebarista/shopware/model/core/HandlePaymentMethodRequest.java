/*
 * Shopware Store API
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.5.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codebarista.shopware.model.core;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.Objects;

/**
 * HandlePaymentMethodRequest
 */
@JsonPropertyOrder({
  HandlePaymentMethodRequest.JSON_PROPERTY_ORDER_ID,
  HandlePaymentMethodRequest.JSON_PROPERTY_FINISH_URL,
  HandlePaymentMethodRequest.JSON_PROPERTY_ERROR_URL
})
@JsonTypeName("handlePaymentMethod_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T11:26:02.541008353+02:00[Europe/Berlin]", comments = "Generator version: 7.5.0")
public class HandlePaymentMethodRequest {
  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private String orderId;

  public static final String JSON_PROPERTY_FINISH_URL = "finishUrl";
  private String finishUrl;

  public static final String JSON_PROPERTY_ERROR_URL = "errorUrl";
  private String errorUrl;

  public HandlePaymentMethodRequest() {
  }

  public HandlePaymentMethodRequest orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Identifier of an order
   * @return orderId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOrderId() {
    return orderId;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public HandlePaymentMethodRequest finishUrl(String finishUrl) {
    
    this.finishUrl = finishUrl;
    return this;
  }

   /**
   * URL to which the client should be redirected after successful payment
   * @return finishUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINISH_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFinishUrl() {
    return finishUrl;
  }


  @JsonProperty(JSON_PROPERTY_FINISH_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinishUrl(String finishUrl) {
    this.finishUrl = finishUrl;
  }


  public HandlePaymentMethodRequest errorUrl(String errorUrl) {
    
    this.errorUrl = errorUrl;
    return this;
  }

   /**
   * URL to which the client should be redirected after erroneous payment
   * @return errorUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorUrl() {
    return errorUrl;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HandlePaymentMethodRequest handlePaymentMethodRequest = (HandlePaymentMethodRequest) o;
    return Objects.equals(this.orderId, handlePaymentMethodRequest.orderId) &&
        Objects.equals(this.finishUrl, handlePaymentMethodRequest.finishUrl) &&
        Objects.equals(this.errorUrl, handlePaymentMethodRequest.errorUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, finishUrl, errorUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HandlePaymentMethodRequest {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    finishUrl: ").append(toIndentedString(finishUrl)).append("\n");
    sb.append("    errorUrl: ").append(toIndentedString(errorUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

