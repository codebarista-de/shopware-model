/*
 * Shopware Store API
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.5.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codebarista.shopware.model.core;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.Objects;

/**
 * OrderShippingCosts
 */
@JsonPropertyOrder({
  OrderShippingCosts.JSON_PROPERTY_UNIT_PRICE,
  OrderShippingCosts.JSON_PROPERTY_TOTAL_PRICE,
  OrderShippingCosts.JSON_PROPERTY_QUANTITY,
  OrderShippingCosts.JSON_PROPERTY_CALCULATED_TAXES,
  OrderShippingCosts.JSON_PROPERTY_TAX_RULES,
  OrderShippingCosts.JSON_PROPERTY_REFERENCE_PRICE,
  OrderShippingCosts.JSON_PROPERTY_LIST_PRICE,
  OrderShippingCosts.JSON_PROPERTY_REGULATION_PRICE
})
@JsonTypeName("Order_shippingCosts")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T11:26:02.541008353+02:00[Europe/Berlin]", comments = "Generator version: 7.5.0")
public class OrderShippingCosts {
  public static final String JSON_PROPERTY_UNIT_PRICE = "unitPrice";
  private Float unitPrice;

  public static final String JSON_PROPERTY_TOTAL_PRICE = "totalPrice";
  private Float totalPrice;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Long quantity;

  public static final String JSON_PROPERTY_CALCULATED_TAXES = "calculatedTaxes";
  private Object calculatedTaxes;

  public static final String JSON_PROPERTY_TAX_RULES = "taxRules";
  private Object taxRules;

  public static final String JSON_PROPERTY_REFERENCE_PRICE = "referencePrice";
  private Object referencePrice;

  public static final String JSON_PROPERTY_LIST_PRICE = "listPrice";
  private OrderShippingCostsListPrice listPrice;

  public static final String JSON_PROPERTY_REGULATION_PRICE = "regulationPrice";
  private OrderShippingCostsRegulationPrice regulationPrice;

  public OrderShippingCosts() {
  }

  public OrderShippingCosts unitPrice(Float unitPrice) {
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Get unitPrice
   * @return unitPrice
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getUnitPrice() {
    return unitPrice;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitPrice(Float unitPrice) {
    this.unitPrice = unitPrice;
  }


  public OrderShippingCosts totalPrice(Float totalPrice) {
    
    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * Get totalPrice
   * @return totalPrice
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getTotalPrice() {
    return totalPrice;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
  }


  public OrderShippingCosts quantity(Long quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public OrderShippingCosts calculatedTaxes(Object calculatedTaxes) {
    
    this.calculatedTaxes = calculatedTaxes;
    return this;
  }

   /**
   * Get calculatedTaxes
   * @return calculatedTaxes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CALCULATED_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCalculatedTaxes() {
    return calculatedTaxes;
  }


  @JsonProperty(JSON_PROPERTY_CALCULATED_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCalculatedTaxes(Object calculatedTaxes) {
    this.calculatedTaxes = calculatedTaxes;
  }


  public OrderShippingCosts taxRules(Object taxRules) {
    
    this.taxRules = taxRules;
    return this;
  }

   /**
   * Get taxRules
   * @return taxRules
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTaxRules() {
    return taxRules;
  }


  @JsonProperty(JSON_PROPERTY_TAX_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxRules(Object taxRules) {
    this.taxRules = taxRules;
  }


  public OrderShippingCosts referencePrice(Object referencePrice) {
    
    this.referencePrice = referencePrice;
    return this;
  }

   /**
   * Get referencePrice
   * @return referencePrice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getReferencePrice() {
    return referencePrice;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferencePrice(Object referencePrice) {
    this.referencePrice = referencePrice;
  }


  public OrderShippingCosts listPrice(OrderShippingCostsListPrice listPrice) {
    
    this.listPrice = listPrice;
    return this;
  }

   /**
   * Get listPrice
   * @return listPrice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIST_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrderShippingCostsListPrice getListPrice() {
    return listPrice;
  }


  @JsonProperty(JSON_PROPERTY_LIST_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setListPrice(OrderShippingCostsListPrice listPrice) {
    this.listPrice = listPrice;
  }


  public OrderShippingCosts regulationPrice(OrderShippingCostsRegulationPrice regulationPrice) {
    
    this.regulationPrice = regulationPrice;
    return this;
  }

   /**
   * Get regulationPrice
   * @return regulationPrice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGULATION_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrderShippingCostsRegulationPrice getRegulationPrice() {
    return regulationPrice;
  }


  @JsonProperty(JSON_PROPERTY_REGULATION_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegulationPrice(OrderShippingCostsRegulationPrice regulationPrice) {
    this.regulationPrice = regulationPrice;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderShippingCosts orderShippingCosts = (OrderShippingCosts) o;
    return Objects.equals(this.unitPrice, orderShippingCosts.unitPrice) &&
        Objects.equals(this.totalPrice, orderShippingCosts.totalPrice) &&
        Objects.equals(this.quantity, orderShippingCosts.quantity) &&
        Objects.equals(this.calculatedTaxes, orderShippingCosts.calculatedTaxes) &&
        Objects.equals(this.taxRules, orderShippingCosts.taxRules) &&
        Objects.equals(this.referencePrice, orderShippingCosts.referencePrice) &&
        Objects.equals(this.listPrice, orderShippingCosts.listPrice) &&
        Objects.equals(this.regulationPrice, orderShippingCosts.regulationPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitPrice, totalPrice, quantity, calculatedTaxes, taxRules, referencePrice, listPrice, regulationPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderShippingCosts {\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    calculatedTaxes: ").append(toIndentedString(calculatedTaxes)).append("\n");
    sb.append("    taxRules: ").append(toIndentedString(taxRules)).append("\n");
    sb.append("    referencePrice: ").append(toIndentedString(referencePrice)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    regulationPrice: ").append(toIndentedString(regulationPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

