/*
 * Shopware Store API
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.5.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codebarista.shopware.model.core;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.Objects;

/**
 * CurrencyJsonApiAllOfItemRounding
 */
@JsonPropertyOrder({
  CurrencyJsonApiAllOfItemRounding.JSON_PROPERTY_DECIMALS,
  CurrencyJsonApiAllOfItemRounding.JSON_PROPERTY_INTERVAL,
  CurrencyJsonApiAllOfItemRounding.JSON_PROPERTY_ROUND_FOR_NET
})
@JsonTypeName("CurrencyJsonApi_allOf_itemRounding")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T11:26:02.541008353+02:00[Europe/Berlin]", comments = "Generator version: 7.5.0")
public class CurrencyJsonApiAllOfItemRounding {
  public static final String JSON_PROPERTY_DECIMALS = "decimals";
  private Long decimals;

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private Float interval;

  public static final String JSON_PROPERTY_ROUND_FOR_NET = "roundForNet";
  private Boolean roundForNet;

  public CurrencyJsonApiAllOfItemRounding() {
  }

  public CurrencyJsonApiAllOfItemRounding decimals(Long decimals) {
    
    this.decimals = decimals;
    return this;
  }

   /**
   * Get decimals
   * @return decimals
  **/
  @JsonProperty(JSON_PROPERTY_DECIMALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDecimals() {
    return decimals;
  }


  @JsonProperty(JSON_PROPERTY_DECIMALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecimals(Long decimals) {
    this.decimals = decimals;
  }


  public CurrencyJsonApiAllOfItemRounding interval(Float interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterval(Float interval) {
    this.interval = interval;
  }


  public CurrencyJsonApiAllOfItemRounding roundForNet(Boolean roundForNet) {
    
    this.roundForNet = roundForNet;
    return this;
  }

   /**
   * Get roundForNet
   * @return roundForNet
  **/
  @JsonProperty(JSON_PROPERTY_ROUND_FOR_NET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRoundForNet() {
    return roundForNet;
  }


  @JsonProperty(JSON_PROPERTY_ROUND_FOR_NET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoundForNet(Boolean roundForNet) {
    this.roundForNet = roundForNet;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyJsonApiAllOfItemRounding currencyJsonApiAllOfItemRounding = (CurrencyJsonApiAllOfItemRounding) o;
    return Objects.equals(this.decimals, currencyJsonApiAllOfItemRounding.decimals) &&
        Objects.equals(this.interval, currencyJsonApiAllOfItemRounding.interval) &&
        Objects.equals(this.roundForNet, currencyJsonApiAllOfItemRounding.roundForNet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decimals, interval, roundForNet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyJsonApiAllOfItemRounding {\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    roundForNet: ").append(toIndentedString(roundForNet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
