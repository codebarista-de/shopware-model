/*
 * Shopware Store API
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Store API
 *
 * The version of the OpenAPI document: 6.5.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codebarista.shopware.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.Objects;

/**
 * ChangeEmailRequest
 */
@JsonPropertyOrder({
  ChangeEmailRequest.JSON_PROPERTY_EMAIL,
  ChangeEmailRequest.JSON_PROPERTY_EMAIL_CONFIRMATION,
  ChangeEmailRequest.JSON_PROPERTY_PASSWORD
})
@JsonTypeName("changeEmail_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T11:26:02.541008353+02:00[Europe/Berlin]", comments = "Generator version: 7.5.0")
public class ChangeEmailRequest {
  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_EMAIL_CONFIRMATION = "emailConfirmation";
  private String emailConfirmation;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public ChangeEmailRequest() {
  }

  public ChangeEmailRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * New email address. Has to be unique amongst all customers
   * @return email
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(String email) {
    this.email = email;
  }


  public ChangeEmailRequest emailConfirmation(String emailConfirmation) {
    
    this.emailConfirmation = emailConfirmation;
    return this;
  }

   /**
   * Confirmation of the new email address.
   * @return emailConfirmation
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL_CONFIRMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmailConfirmation() {
    return emailConfirmation;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_CONFIRMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmailConfirmation(String emailConfirmation) {
    this.emailConfirmation = emailConfirmation;
  }


  public ChangeEmailRequest password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Customer&#39;s current password
   * @return password
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(String password) {
    this.password = password;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeEmailRequest changeEmailRequest = (ChangeEmailRequest) o;
    return Objects.equals(this.email, changeEmailRequest.email) &&
        Objects.equals(this.emailConfirmation, changeEmailRequest.emailConfirmation) &&
        Objects.equals(this.password, changeEmailRequest.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, emailConfirmation, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeEmailRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailConfirmation: ").append(toIndentedString(emailConfirmation)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

